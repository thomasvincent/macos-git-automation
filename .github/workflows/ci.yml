name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read

jobs:
  # Temporarily disable containerized tests until Docker configuration is fixed
  # Use containerized tests for comprehensive testing across WordPress versions
  containerized-tests:
    continue-on-error: true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        wp-version: [latest, '6.5', '6.4', '6.3']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup dependency caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.composer/cache
          node_modules
          vendor
        key: ${{ runner.os }}-deps-${{ hashFiles('**/composer.lock', '**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    - name: Make entrypoint script executable
      run: chmod +x docker-entrypoint.sh

    - name: Create logs and test-results directories
      run: mkdir -p logs test-results && chmod -R 777 logs test-results

    - name: Build and run tests
      run: |
        # Build the Docker image
        docker compose build

        # Run the tests with Docker Compose
        WP_VERSION=${{ matrix.wp-version }} docker compose up --abort-on-container-exit
      env:
        WP_VERSION: ${{ matrix.wp-version }}

    - name: Check test results
      id: check-results
      run: |
        if [ -f logs/composer-test-failed.log ] || [ -f logs/npm-test-failed.log ]; then
          echo "Tests failed. Check logs for details."
          echo "tests_failed=true" >> $GITHUB_OUTPUT
        else
          echo "All tests passed successfully!"
          echo "tests_failed=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload test logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-wp-${{ matrix.wp-version }}
        path: |
          ./logs
          ./test-results
        retention-days: 14

    - name: Display test result summary
      if: always()
      run: |
        echo "=== PHP Test Results ==="
        if [ -f logs/composer-test.log ]; then
          cat logs/composer-test.log
        else
          echo "No PHP test logs found"
        fi
        
        echo "=== JavaScript Test Results ==="
        if [ -f logs/npm-test.log ]; then
          cat logs/npm-test.log
        else
          echo "No JavaScript test logs found"
        fi

    - name: Fail the workflow if tests failed
      if: steps.check-results.outputs.tests_failed == 'true'
      run: exit 1

  # Keep a matrix version for testing on specific PHP versions
  php-matrix-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.1, 8.2, 8.3]
      fail-fast: false
        
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, intl, pdo_mysql, gd, zip, exif
        coverage: xdebug
        
    - name: Setup dependency caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.composer/cache
          vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-
          
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
      
    - name: Configure Composer for PHPCS
      run: composer global config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
      
    - name: Setup WordPress test environment
      run: |
        # Clean up any existing WordPress test environment
        rm -rf /tmp/wordpress-tests-lib || true
        rm -rf /tmp/wordpress || true

        # Check MySQL connection
        echo "Checking MySQL connection..."
        mysql -h 127.0.0.1 -u root -proot -e "SHOW DATABASES;"

        # Install WordPress test environment
        bash bin/install-wp-tests.sh wordpress_test root root 127.0.0.1 latest
        
    - name: Run PHP tests
      run: composer test
      
    # PHP CodeSniffer check is now handled separately in the lint job
  
  js-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
      fail-fast: false
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: npm
        
    - name: Install dependencies
      run: npm ci || npm install --legacy-peer-deps
      
    - name: Run JavaScript tests
      run: npm test
      
  lint:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        tools: composer, phpcs
        extensions: mbstring, xml, intl
        
    - name: Configure Composer for PHPCS
      run: composer global config allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
      
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-interaction
      
    - name: Set up WordPress Coding Standards
      run: composer config-phpcs
      
    - name: Run PHPCS
      continue-on-error: true
      run: composer phpcs
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: npm
        
    - name: Install Node.js dependencies
      run: npm ci || npm install --legacy-peer-deps
      
    - name: Run ESLint
      continue-on-error: true
      run: npm run lint
