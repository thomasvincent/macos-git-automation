#!/usr/bin/env osascript -l JavaScript
/**
 * CloneGitRepoJXA.jxa
 *
 * This script clones a Git repository from a URL in the clipboard.
 * It validates the URL, extracts the repo name, and clones the repo
 * to a directory in the user's Documents folder. It then opens the
 * cloned repo in Finder.
 *
 * Author: Thomas Vincent
 * Date: 2024-05-04
 * License: MIT
 *
 * MIT License
 *
 * Copyright (c) 2024 Thomas Vincent
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Requirements:
 * - GitHub CLI (gh) installed and authenticated
 * - Valid Git repository URL in the clipboard
 *
 * Usage:
 * - Run this script from an Automator Application workflow
 * - Or run it from the command line:
 *   osascript -l JavaScript CloneGitRepoJXA.js
 */

function run(input, parameters) {
  const app = Application.currentApplication()
  app.includeStandardAdditions = true

  const gitURL = app.clipboard()

  if (!gitURL.startsWith('http')) {
    app.displayAlert('Invalid Git URL', 'Please copy a valid Git repository URL to the clipboard.')
    return
  }

  const repoName = app.doShellScript(`basename ${app.quoted(gitURL)} .git | tr -dc '[:alnum:]_-'`)
  const cloneDir = `${app.pathTo('documents').toString()}/${repoName}`

  try {
    app.doShellScript(`mkdir -m 700 ${app.quoted(cloneDir)}`)
    app.doShellScript(`gh repo clone ${app.quoted(gitURL)} ${app.quoted(cloneDir)}`)
  } catch (error) {
    app.displayAlert('Clone Failed', error.message)
    return
  }

  const finder = Application('Finder')
  finder.reveal(Path(cloneDir))
  finder.activate()
}
